package com.mycompany.employeeattendancesystem;

import java.util.ArrayList;
import java.util.Scanner;

class Employee {
    private String firstName;
    private String lastName;
    private int employeeNumber;
    private String department;

    public Employee(String firstName, String lastName, int employeeNumber, String department) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.employeeNumber = employeeNumber;
        this.department = department;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public int getEmployeeNumber() {
        return employeeNumber;
    }

    public String getDepartment() {
        return department;
    }

    public void displayEmployeeInfo() {
        System.out.println("Name: " + firstName + " " + lastName);
        System.out.println("Employee Number: " + employeeNumber);
        System.out.println("Department: " + department);
    }

}

class LeaveApplication {
    
    protected String employeeNumber;
    protected String startDate;
    protected String endDate;
    
public LeaveApplication(String employeeNumber, String startDate, String endDate) 
    {
        this.employeeNumber = employeeNumber;
        this.startDate = startDate;
        this.endDate = endDate;
    }
  
public void displayDetails() 
    {
        System.out.println("Employee Number: " + employeeNumber);
        System.out.println("Start Date: " + startDate);
        System.out.println("End Date: " + endDate);
    }
public void updateDetails(String startDate, String endDate) 
    {
        this.startDate = startDate;
        this.endDate = endDate;
    }
}

class CasualLeave extends LeaveApplication {
    
public CasualLeave(String employeeNumber, String startDate, String endDate) 
{
    super(employeeNumber, startDate, endDate);
}

@Override
public void displayDetails() 
{
    System.out.println("** Casual Leave Application **");
    super.displayDetails();
}
}

class SickLeave extends LeaveApplication {
    
    public SickLeave(String employeeNumber, String startDate, String endDate) 
    {
        super(employeeNumber, startDate, endDate);
    }

    @Override
    public void displayDetails() 
    {
        System.out.println("** Sick Leave Application **");
        super.displayDetails();
    }
}

class LeaveApplicationHandler {

    //all of the CRUD methods
    
    public static LeaveApplication createLeave(Scanner scanner, String type) {
        System.out.print("Enter Employee Number: ");
        String employeeNumber = scanner.nextLine();

        
        System.out.print("Enter Start Date (DD-MM-YYYY): ");
        String startDate = scanner.nextLine();

        System.out.print("Enter End Date (DD-MM-YYYY): ");
        String endDate = scanner.nextLine();
        
        System.out.println("Data has been stored.");

        if (type.equals("casual")) {
            return new CasualLeave(employeeNumber, startDate, endDate);
        } else if (type.equals("sick")) {
            return new SickLeave(employeeNumber, startDate, endDate);
        } else {
            throw new IllegalArgumentException("Unknown leave type: " + type);
        }
    }

    
    public static void editApplication(Scanner scanner, ArrayList<LeaveApplication> leaveApplications) {
        System.out.print("Enter the application number to edit: ");
        int index = scanner.nextInt() - 1;
        scanner.nextLine(); 

        if (index >= 0 && index < leaveApplications.size()) {
            
            System.out.print("Enter new Start Date (DD-MM-YYYY): ");
            String newStartDate = scanner.nextLine();

            System.out.print("Enter new End Date (DD-MM-YYYY): ");
            String newEndDate = scanner.nextLine();

            leaveApplications.get(index).updateDetails(newStartDate, newEndDate);
            System.out.println("Application updated successfully.");
        } else {
            System.out.println("Invalid application number.");
        }
    }

   
    public static void deleteApplication(Scanner scanner, ArrayList<LeaveApplication> leaveApplications) {
        System.out.print("Enter the application number to delete: ");
        int index = scanner.nextInt() - 1;
        scanner.nextLine(); 

        if (index >= 0 && index < leaveApplications.size()) {
            leaveApplications.remove(index);
            System.out.println("Application deleted successfully.");
        } else {
            System.out.println("Invalid application number.");
        }
    }
}

class Login  {
    private String predefinedUsername;
    private String predefinedPassword;

    public Login(String username, String password) {
        this.predefinedUsername = username;
        this.predefinedPassword = password;
    }
    
    
    public boolean login(String username, String password) throws LoginException {
        if (username == null || password == null) {
            throw new LoginException("Username or password cannot be null.");
        }
        if (username.equals(predefinedUsername) && password.equals(predefinedPassword)) {
            return true;
        } else {
            throw new LoginException("Invalid username or password.");
        }
    }
    
    
    public void startLogin() {
        Scanner scanner = new Scanner(System.in);
        
    try {
            
            System.out.print("Enter username: ");
            String inputUsername = scanner.nextLine();

            System.out.print("Enter password: ");
            String inputPassword = scanner.nextLine();

            if (login(inputUsername, inputPassword)) {
                System.out.println("Login successful! Welcome, " + inputUsername);
            }
        } catch (LoginException e) {
            System.out.println("Login failed: " + e.getMessage());
            System.exit(1);
        } catch (Exception e) {
            System.out.println("An unexpected error occurred: " + e.getMessage());
            System.exit(1);
        }
    
    }
    

    
    
}

class LoginException extends Exception {
    
    public LoginException(String message) {
        super(message);
    }
    
}

class Overtime extends Employee {
    private String overtimeDate;
    private String startHour;
    private String endHour;

    public Overtime(String firstName, String lastName, int employeeNumber, String department,
                    String overtimeDate, String startHour, String endHour) {
        super(firstName, lastName, employeeNumber, department);
        this.overtimeDate = overtimeDate;
        this.startHour = startHour;
        this.endHour = endHour;
    }

    public String getOvertimeDate() {
        return overtimeDate;
    }

    public String getStartHour() {
        return startHour;
    }

    public String getEndHour() {
        return endHour;
    }

    public void displayOvertimeInfo() {
        displayEmployeeInfo();
        System.out.println("Overtime Date: " + overtimeDate);
        System.out.println("Start Hour: " + startHour);
        System.out.println("End Hour: " + endHour);
    }

}

class OvertimeManager {

    private ArrayList<Overtime> overtimeRecords = new ArrayList<>();

    public void addOvertimeRecord(Overtime overtime) {
        overtimeRecords.add(overtime);
        System.out.println("Overtime record added successfully!");
    }

    public void viewOvertimeRecords() {
        if (overtimeRecords.isEmpty()) {
            System.out.println("No overtime records available.");
        } else {
            for (Overtime overtime : overtimeRecords) {
                System.out.println("-------------------------");
                overtime.displayOvertimeInfo();
            }
        }
    }

    public void updateOvertimeRecord(int employeeNumber, String newDate, String newStartHour, String newEndHour) {
        for (Overtime overtime : overtimeRecords) {
            if (overtime.getEmployeeNumber() == employeeNumber) {
                overtimeRecords.remove(overtime);
                overtimeRecords.add(new Overtime(overtime.getFirstName(), overtime.getLastName(),
                        overtime.getEmployeeNumber(), overtime.getDepartment(), newDate, newStartHour, newEndHour));
                System.out.println("Overtime record updated successfully!");
                return;
            }
        }
        System.out.println("Overtime record not found!");
    }

    public void deleteOvertimeRecord(int employeeNumber) {
        overtimeRecords.removeIf(overtime -> overtime.getEmployeeNumber() == employeeNumber);
        System.out.println("Overtime record deleted successfully!");
    }
}

class TimeAttendance {
    private int employeeNumber;
    private String date;
    private String checkIn;
    private String checkOut;

    public TimeAttendance(int employeeNumber, String date, String checkIn, String checkOut) {
        this.employeeNumber = employeeNumber;
        this.date = date;
        this.checkIn = checkIn;
        this.checkOut = checkOut;
    }

    public int getEmployeeNumber() {
        return employeeNumber;
    }

    public String getDate() {
        return date;
    }

    public String getCheckIn() {
        return checkIn;
    }

    public String getCheckOut() {
        return checkOut;
    }

    public void displayAttendanceDetails() {
        System.out.println("Employee Number: " + employeeNumber);
        System.out.println("Date: " + date);
        System.out.println("Check-In Time: " + checkIn);
        System.out.println("Check-Out Time: " + checkOut);
    }
}

public class EmployeeAttendanceSystem {


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Login loginSystem = new Login("employee1" , "12345" );
        ArrayList<LeaveApplication> leaveApplications = new ArrayList<>();
        OvertimeManager overtimeManager = new OvertimeManager();
        ArrayList<TimeAttendance> timeAtt = new ArrayList<>();

        loginSystem.startLogin();
       

        boolean cont = true;
        while (cont) {
        System.out.println("\nMain Menu:");
        System.out.println("1. Attendance Entry");
        System.out.println("2. Apply for Leave");
        System.out.println("3. Apply for Overtime");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
        
        int mainChoice = scanner.nextInt();
        scanner.nextLine(); 

    switch (mainChoice) {
        case 1: 
            boolean Menu = true;
            while (Menu) {
                System.out.println("\nAttendance Menu:");
                System.out.println("1. Add Time Attendance Record");
                System.out.println("2. View Time Attendance Records");
                System.out.println("3. Edit Time Attendance Records");
                System.out.println("4. Delete Time Attendance Records");
                System.out.println("5. Back to Main Menu");
                System.out.print("Enter your choice: ");
                int attendanceChoice = scanner.nextInt();
                scanner.nextLine();

                switch (attendanceChoice) {
                    case 1:
                        System.out.print("Employee Number: ");
                        int empNo = scanner.nextInt();
                        System.out.print("Date (DD-MM-YYYY): ");
                        String attDate = scanner.next();
                        System.out.print("Check-In Time (HH:mm): ");
                        String checkIn = scanner.next();
                        System.out.print("Check-Out Time (HH:mm): ");
                        String checkOut = scanner.next();

                        TimeAttendance Att = new TimeAttendance(empNo, attDate, checkIn, checkOut);
                        timeAtt.add(Att);
                        System.out.println("Time attendance record added successfully!");
                        break;
                        
                    case 2:
                        if (timeAtt.isEmpty()) {
                            System.out.println("No time attendance records found.");
                        } else {
                            for (int i = 0; i < timeAtt.size(); i++) {
                                System.out.println("Record " + (i + 1) + ":");
                                timeAtt.get(i).displayAttendanceDetails();
                                System.out.println("--------------------");
                            }
                        }
                        break;
                        
                    case 3:
                        System.out.print("Enter the record number to edit: ");
                        int editIndex = scanner.nextInt() - 1; 
                        scanner.nextLine();  

                        if (editIndex >= 0 && editIndex < timeAtt.size()) {
                            System.out.print("Enter new Employee Number: ");
                            int newEmpNo = scanner.nextInt();
                            System.out.print("Enter new Date (DD-MM-YYYY): ");
                            String newAttDate = scanner.next();
                            System.out.print("Enter new Check-In Time (HH:mm): ");
                            String newCheckIn = scanner.next();
                            System.out.print("Enter new Check-Out Time (HH:mm): ");
                            String newCheckOut = scanner.next();

                        TimeAttendance updatedRecord = new TimeAttendance(newEmpNo, newAttDate, newCheckIn, newCheckOut);
                        timeAtt.set(editIndex, updatedRecord);  
                        System.out.println("Time attendance record updated successfully!");
                    } else {
                        System.out.println("Invalid record number.");
                    }
                        break;
                        
                    case 4:
       
                        System.out.print("Enter the record number to delete: ");
                        int deleteIndex = scanner.nextInt() - 1;  
                        scanner.nextLine();  

                        if (deleteIndex >= 0 && deleteIndex < timeAtt.size()) {
                        timeAtt.remove(deleteIndex);  
                        System.out.println("Time attendance record deleted successfully!");
                        } else {
                        System.out.println("Invalid record number.");
                        }
                        break;
                        
                    case 5:
                        Menu = false; 
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");

                        }
                    }
                        break;

        case 2: 
            boolean leaveMenu = true;
            while (leaveMenu) {
                System.out.println("\nLeave Menu:");
                System.out.println("1. Apply for Casual Leave");
                System.out.println("2. Apply for Sick Leave");
                System.out.println("3. View All Applications");
                System.out.println("4. Edit an Application");
                System.out.println("5. Delete an Application");
                System.out.println("6. Back to Main Menu");
                System.out.print("Enter your choice: ");
                int leaveChoice = scanner.nextInt();
                scanner.nextLine();

                switch (leaveChoice) {
                    case 1:
                        leaveApplications.add(LeaveApplicationHandler.createLeave(scanner, "casual"));
                        break;
                    case 2:
                        leaveApplications.add(LeaveApplicationHandler.createLeave(scanner, "sick"));
                        break;
                    case 3:
                        if (leaveApplications.isEmpty()) {
                            System.out.println("No leave applications found.");
                        } else {
                            for (int i = 0; i < leaveApplications.size(); i++) {
                                System.out.println("Application " + (i + 1) + ":");
                                leaveApplications.get(i).displayDetails();
                                System.out.println("--------------------");
                            }
                        }
                        break;
                    case 4:
                        LeaveApplicationHandler.editApplication(scanner, leaveApplications);
                        break;
                    case 5:
                        LeaveApplicationHandler.deleteApplication(scanner, leaveApplications);
                        break;
                    case 6:
                        leaveMenu = false; 
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
            break;

        case 3: 
            boolean overtimeMenu = true;
            while (overtimeMenu) {
                System.out.println("\nOvertime Menu:");
                System.out.println("1. Add Overtime Record");
                System.out.println("2. View Overtime Records");
                System.out.println("3. Update Overtime Record");
                System.out.println("4. Delete Overtime Record");
                System.out.println("5. Back to Main Menu");
                System.out.print("Enter your choice: ");
                int overtimeChoice = scanner.nextInt();
                scanner.nextLine();

                switch (overtimeChoice) {
                    case 1:
                        System.out.print("First Name: ");
                        String firstName = scanner.next();
                        System.out.print("Last Name: ");
                        String lastName = scanner.next();
                        System.out.print("Employee Number: ");
                        int employeeNumber = scanner.nextInt();
                        System.out.print("Department: ");
                        String department = scanner.next();
                        System.out.print("Overtime Date (DD-MM-YYYY): ");
                        String date = scanner.next();
                        System.out.print("Start Hour (HH:mm): ");
                        String startHour = scanner.next();
                        System.out.print("End Hour (HH:mm): ");
                        String endHour = scanner.next();

                        Overtime overtime = new Overtime(firstName, lastName, employeeNumber, department, date, startHour, endHour);
                        overtimeManager.addOvertimeRecord(overtime);
                        break;
                    case 2:
                        overtimeManager.viewOvertimeRecords();
                        break;
                    case 3:
                        System.out.print("Enter Employee Number to update: ");
                        int updateEmpNo = scanner.nextInt();
                        System.out.print("New Overtime Date (DD-MM-YYYY): ");
                        String newDate = scanner.next();
                        System.out.print("New Start Hour (HH:mm): ");
                        String newStartHour = scanner.next();
                        System.out.print("New End Hour (HH:mm): ");
                        String newEndHour = scanner.next();
                        overtimeManager.updateOvertimeRecord(updateEmpNo, newDate, newStartHour, newEndHour);
                        break;
                    case 4:
                        System.out.print("Enter Employee Number to delete: ");
                        int deleteEmpNo = scanner.nextInt();
                        overtimeManager.deleteOvertimeRecord(deleteEmpNo);
                        break;
                    case 5:
                        overtimeMenu = false; // Exit Overtime Menu
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
            break;

        case 4: 
            cont = false;
            System.out.println("Exiting the system. Goodbye!");
            break;

        default:
            System.out.println("Invalid choice! Please try again.");
    }
        }
    }
}
